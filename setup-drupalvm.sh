#!/usr/bin/env bash

read_prompt() {
  if [[ ${BASH_VERSION:0:1} > 3 ]]; then
    read -e -p "$1: " -i $2 $3
  else
    local response
    read -e -p "$1 ($2): " response
    response="${response:-$2}"
    eval $3="'$response'"
  fi
}

# Clean up files
rm -f master.zip
rm -rf drupal-vm-master/ provisioning/ default.config.yml Vagrantfile

# Download DrupalVM
echo "Downloading DrupalVM..."

if hash wget 2>/dev/null; then
  wget --quiet https://github.com/geerlingguy/drupal-vm/archive/master.zip
elif hash curl 2>/dev/null; then
  curl -LOs https://github.com/geerlingguy/drupal-vm/archive/master.zip
else
  echo "We need either wget or curl to download the zip file. Please install and try again."
  exit 1
fi

if ! hash unzip 2>/dev/null; then
  echo "We need unzip to process the downloaded archive. Please install and try again."
  exit 2
fi

unzip -qq master.zip
rm -f master.zip

# Extract and prepare the directory
echo "Extracting DrupalVM and preparing the directory..."
cd drupal-vm-master/
rm -rf .gitignore .travis.yml composer.json LICENSE README.md mkdocs.yml example.drupal.composer.json example.drupal.make.yml docs/ examples/ tests/
mv * ..
cd ..
rmdir drupal-vm-master/

# Get all the data for the config

pwd=`pwd`
default_machine_name=`basename $pwd`

read_prompt "Enter the box" "geerlingguy/ubuntu1604" box
read_prompt "Enter the machine name" "$default_machine_name" machinename
read_prompt "Enter the domain name for the host" "$machinename.dev" hostname
read_prompt "Enter the domain name to access the root" "${machinename}root.dev" roothostname
read_prompt "Enter the IP" "0.0.0.0" ip
read_prompt "Enter the relative path to the Drupal installation" "$machinename/docroot" drupalroot
read_prompt "Enter the PHP version (5.6 or 7.0)" "7.0" php_version

# Generate config.yml

cat > config.yml <<- YML
---
# File generated by DrupalVM script by @hussainweb

vagrant_box: $box
vagrant_hostname: $hostname
vagrant_machine_name: $machinename
vagrant_ip: $ip

vagrant_synced_folders:
  - local_path: .
    destination: /var/www
    type: nfs
    create: true

build_makefile: false
build_composer: false
build_composer_project: false
install_site: false

drupal_core_path: "/var/www/$drupalroot"

apache_vhosts:
  - servername: "{{ drupal_domain }}"
    serveralias: "www.{{ drupal_domain }}"
    documentroot: "{{ drupal_core_path }}"
    extra_parameters: |
          ProxyPassMatch ^/(.*\.php(/.*)?)$ "fcgi://127.0.0.1:9000{{ drupal_core_path }}"

  - servername: "$roothostname"
    documentroot: "/var/www"
    extra_parameters: |
          ProxyPassMatch ^/(.*\.php(/.*)?)$ "fcgi://127.0.0.1:9000/var/www"

  - servername: "adminer.{{ vagrant_hostname }}"
    documentroot: "{{ adminer_install_dir }}"
    extra_parameters: |
          ProxyPassMatch ^/(.*\.php(/.*)?)$ "fcgi://127.0.0.1:9000{{ adminer_install_dir }}"

  - servername: "xhprof.{{ vagrant_hostname }}"
    documentroot: "{{ php_xhprof_html_dir }}"
    extra_parameters: |
          ProxyPassMatch ^/(.*\.php(/.*)?)$ "fcgi://127.0.0.1:9000{{ php_xhprof_html_dir }}"

  - servername: "pimpmylog.{{ vagrant_hostname }}"
    documentroot: "{{ pimpmylog_install_dir }}"
    extra_parameters: |
          ProxyPassMatch ^/(.*\.php(/.*)?)$ "fcgi://127.0.0.1:9000{{ pimpmylog_install_dir }}"

  - servername: "{{ vagrant_ip }}"
    serveralias: "dashboard.{{ vagrant_hostname }}"
    documentroot: "{{ dashboard_install_dir }}"
    extra_parameters: |
          ProxyPassMatch ^/(.*\.php(/.*)?)$ "fcgi://127.0.0.1:9000{{ dashboard_install_dir }}"
          DirectoryIndex index.html

# Comment out any extra utilities you don't want to install. If you don't want
# to install *any* extras, make set this value to an empty set, e.g. '[]'.
installed_extras:
  - adminer
  # - blackfire
  - drupalconsole
  # - elasticsearch
  - mailhog
  # - memcached
  # - newrelic
  # - nodejs
  - pimpmylog
  # - redis
  # - ruby
  # - selenium
  # - solr
  # - varnish
  - xdebug
  # - xhprof

# Remove this section if you want to use MySQL.
mysql_packages:
  - mariadb-client
  - mariadb-server
  - python-mysqldb

drush_version: "8.x"

firewall_allowed_tcp_ports:
  - "22"
  - "25"
  - "80"
  - "81"
  - "443"
  - "3306"
  - "4444"
  - "8025"
  - "8080"
  - "8443"
  - "8983"
  - "9200"

php_version: "$php_version"
YML

if [ "$php_version" != "7.0" ]; then
  cat >> config.yml <<- PHPSETTINGS
php_install_recommends: no
php_packages:
  - php5.6
  - php5.6-apcu
  - php5.6-mcrypt
  - php5.6-cli
  - php5.6-common
  - php5.6-curl
  - php5.6-dev
  - php5.6-fpm
  - php5.6-gd
  - php5.6-sqlite3
  - php5.6-xml
  - php5.6-mbstring
  - php-pear
  - libpcre3-dev
php_conf_paths:
  - /etc/php/5.6/fpm
  - /etc/php/5.6/apache2
  - /etc/php/5.6/cli
php_extension_conf_paths:
  - /etc/php/5.6/fpm/conf.d
  - /etc/php/5.6/apache2/conf.d
  - /etc/php/5.6/cli/conf.d
php_fpm_daemon: php5.6-fpm
php_fpm_conf_path: "/etc/php/5.6/fpm"
php_fpm_pool_conf_path: "/etc/php/5.6/fpm/pool.d/www.conf"
php_mysql_package: php5.6-mysql
php_memcached_package: php5.6-memcached
php_redis_package: php5.6-redis
xhprof_download_url: https://github.com/phacility/xhprof/archive/master.tar.gz
xhprof_download_folder_name: xhprof-master
PHPSETTINGS
fi

cat >> config.yml <<- YML

composer_global_packages:
  - { name: hirak/prestissimo, release: '^0.3' }
  - { name: drupal/coder }

nodejs_version: "6.x"
YML

cat <<- MESSAGE

Generated config.yml.
Adjust config.yml as per your needs and adapt from default.config.yml. Once
done, run 'vagrant up' to start the virtual machine.
MESSAGE
